-- CIS 895 MSE Project Formal Specification MACTS Architecture
-- File: macts.use
-- Author: Bryan Nehl
--
-- Description: Aspects of the MultiAgent Control of Traffic Signals 
-- models specified in USE OCL
-- 
-- This is a formal specification that:
-- 	The safety agent enforces minimum time per light color and 
-- 	The lights must change in a rotation of green, yellow, red.  
-- 	The system combines all traffic light signals at an intersection into a single command.
-- 
-- The interactions involved are:
-- Planning Agent sends plan to Safety Agent. 
-- Safety Agent evaluates.  
--		If ok, the Safety Agent sends the plan on to the Communications Agent.  
--		If not ok, the Safety Agent notifies the planning agent that 
--			the plan is not acceptable and the cause/reason why.

model Macts

-- classes -------------------

class TraCI
end

-- abstract, no instances of
class Agent
end

-- one
class CommunicationsAgent < Agent
operations
	submitToTraci(command : String)
end

-- MAS Node 
-- abstract
-- may only have one "PlanningAgent" type per node
class MasNode
attributes
	planningAgent : PlanningAgent
	safetyAgent : SafetyAgent
end

class PlanningAgent < Agent
operations
	createPlan() : String
	submitToSafetyAgentForReview(plan : String)
	gatherSafetyAgentResponse() : String
end

class SafetyAgent < Agent
attributes
	signalState : SignalState
operations
	checkSafePlan(plan : String) : String
end

class SignalState
attributes
	minimumGreenTime : Integer
	minimumRedTime : Integer
	minimumYellowTime : Integer
	currentState : String
	ageOfCurrentState : Integer
operations
	SignalState(minRedTime : Integer, minGreenTime : Integer, minYellowTime : Integer, initialState : String) : SignalState
	getCurrentState() : String
	getAgeOfCurrentStateInSeconds() : Integer
	changeStateTo( desiredState : String) : String
end

-- associations -----------------

association interacts between
  TraCI[1] role simulator;
  CommunicationsAgent[1] role liaison;
end

-- constraints --------------------

constraints

context CommunicationsAgent inv OneCommAgent:
	CommunicationsAgent.allInstances->size() = 1

context mn:MasNode
	inv planningAgentIsAPlanningAgent:
        mn.planningAgent.oclIsKindOf(PlanningAgent)
	inv safetyAgentIsSafetyAgent:
		mn.safetyAgent.oclIsKindOf(SafetyAgent)
		
context SignalState
	inv validCurrentState:
		Set{'G','r','y'} -> includes(self.currentState)
	
-- PLANNING AGENT -----------------------------------------------------
-- sends a message with plan to the safety agent

-- receives messages with error issues from safety agent		
		
-- SAFETY AGENT -------------------------------------------------------		
-- LIGHTS MUST CHANGE IN CORRECT ORDER: green, yellow, red --------------------
-- valid light colors are: { G, g, r, y }
-- post validState:
--		Set{'G','r','y'}  -> includes(self.currentState)
context SignalState::changeStateTo(desiredState:String):String
post yellowFollowsGreen:
	self.currentState@pre = 'G' implies self.currentState = 'y'
post redFollowsYellow:
	self.currentState@pre = 'y' implies self.currentState = 'r'
post greenFollowsRed:
	self.currentState@pre = 'r' implies self.currentState = 'G'

-- MINIMUM TIME PER LIGHT COLOR


-- SAFE PLAN: let the planning agent know if plan is acceptable
-- UNSAFE PLANE: if not, give reason why

-- SUBMIT PLAN: to the Communications Agent

-- COMMUNICATIONS AGENT ----------------------------------------------
-- receives plan from Safety Agent and executes/submits it to TraCI
